{{- $releaseName := .Release.Name}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}
  labels: 
    {{- include "infrablockspace.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "infrablockspace.selectorLabels" . | nindent 6 }}
  # select headless service
  serviceName: {{.Release.Name }}-headeless
  # update strategy
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  # spec
  replicas: 1 # by default is 1
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "infrablockspace.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "infrablockspace.serviceAccountName" . }}
      securityContext:
        fsGroup: 1000
      terminationGracePeriodSeconds: {{.Values.terminationGracePeriodSeconds}}
      initContainers:
        - name: download-spec
          image: curlimages/curl:8.1.2
          command: [
              "curl",
              "-L",
              {{.Values.node.spec.url | quote}},
              "-o",
              "/tmp/raw-local-chainspec.json",
            ]
          volumeMounts:
            - name: infrablockspace-spec
              mountPath: /tmp
        {{- if ne (len .Values.node.keys) 0}}
        - name: inject-keys
          image: public.ecr.aws/v8x3j0k5/infrablockspace:{{.Values.tag}}
          command: ["/bin/bash"]
          args:
            - -c
            - |
              set -eu
              {{- range $key := .Values.node.keys}}
              if [ ! -f/var/run/secrets/{{$key.type}}/type ]; then
                echo "Error: File/var/run/secrets/{{$key.type}}/type does not exist"
                exit 1
              fi
              /usr/local/bin/infrablockspace key insert \
              --keystore-path /keystore \
              --key-type $(cat /var/run/secrets/{{$key.type}}/type) \
              --scheme $(cat /var/run/secrets/{{$key.type}}/scheme) \
              --suri /var/run/secrets/{{$key.type}}/seed \
              && echo "Inserted key into Keystore" \
              || echo "Failed to insert key into Keystore."
              {{end }}
          resources:
          volumeMounts:
            - mountPath: /keystore
              name: chain-keystore
            {{- range $key := .Values.node.keys}}
            - mountPath: /var/run/secrets/{{$key.type}}
              name: {{$key.type}}
            {{- end }}
        {{- end}}
      containers:
        - name: infrablockspace
          image: public.ecr.aws/v8x3j0k5/infrablockspace:{{.Values.tag}}
          imagePullPolicy: Always
          args:
            [
              "--validator",
              "--base-path",
              "/data/infrablockspace",
              "--chain",
              "/tmp/raw-local-chainspec.json",
              "--prometheus-external",
              "--prometheus-port=9615",
              "--unsafe-rpc-external",
              "--rpc-cors",
              "all",
              "--rpc-max-connections=16000",
              "--keystore-path=/keystore",
              {{- if eq .Values.node.boot.enable false}}
              "--bootnodes",
              {{- range $url := .Values.node.boot.urls}}
              "{{$url }}",
              {{- end}}
              {{- end}}
            ]
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: chain-data
              mountPath: /data/infrablockspace
            - name: infrablockspace-spec
              mountPath: /tmp
            - mountPath: /keystore
              name: chain-keystore
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: infrablockspace-spec
          emptyDir: {}
        - name: chain-keystore
          emptyDir: {}
        {{- if.Values.node.chainData.enabled }}
        - name: chain-data
          persistentVolumeClaim:
            claimName: {{ .Values.node.chainData.name }}
        {{- end }}
        {{- range $key := .Values.node.keys}}
        - name: {{ $key.type }}
          secret:
            secretName: {{$releaseName}}-{{ $key.type }}
        {{- end }}
      {{- if eq .Values.node.chainData.enable true}}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: chain-data
        {{- with .Values.node.chainData.annotations }}
        annotations: {{ toYaml . | nindent 10 }}
        {{- end }}
      spec:
        accessModes: [ "ReadWriteOnce" ]
        {{- if or .Values.node.chainData.kubernetesVolumeSnapshot .Values.node.chainData.kubernetesVolumeToClone }}
        dataSource:
          {{- if .Values.node.chainData.kubernetesVolumeSnapshot }}
          name: {{ .Values.node.chainData.kubernetesVolumeSnapshot }}
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
          {{- else }}
          name: {{ .Values.node.chainData.kubernetesVolumeToClone }}
          kind: PersistentVolumeClaim
          {{- end }}
        {{- end }}
        storageClassName: {{ .Values.node.chainData.storageClass }}
        resources:
          requests:
            storage: {{ .Values.node.chainData.volumeSize }}
      {{- end }}